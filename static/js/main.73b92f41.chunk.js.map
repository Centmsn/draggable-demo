{"version":3,"sources":["components/Checkbox.tsx","components/GirdContainer.tsx","App.tsx","index.tsx"],"names":["Checkbox","isChecked","onClick","isDisabled","className","icon","faCheck","faTimes","GirdContainer","isGridVisible","useState","startPoint","setStartPoint","endPoint","setEndPoint","isDrawing","setIsDrawing","containeRef","useRef","handleDrawing","e","current","x","clientX","y","clientY","handleStopDrawing","removeEventListener","document","onMouseDown","preventDefault","container","addEventListener","ref","gridElements","index","dynamicClasses","push","renderGrid","style","top","getStartY","left","getStartX","width","getWidth","height","getHeight","startX","startY","endX","endY","String","Math","abs","split","map","letter","arr","length","join","calcRectArea","App","setIsGridVisible","prev","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.73b92f41.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheck, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport interface CheckboxProps {\r\n  isChecked: boolean;\r\n  onClick: (event?: React.MouseEvent) => void;\r\n  isDisabled?: boolean;\r\n}\r\n\r\nconst Checkbox = ({\r\n  isChecked,\r\n  onClick,\r\n  isDisabled,\r\n}: CheckboxProps): JSX.Element => {\r\n  return (\r\n    <div\r\n      onClick={onClick}\r\n      className={`w-6 h-6 border-2 border-gray-600 rounded cursor-pointer flex items-center justify-center text-${\r\n        isChecked ? \"green\" : \"pink\"\r\n      }-700 hover:bg-gray-200`}\r\n    >\r\n      <FontAwesomeIcon icon={isChecked ? faCheck : faTimes} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nexport interface GridContainerProps {\r\n  isGridVisible: boolean;\r\n}\r\n\r\nexport interface Point {\r\n  x: number;\r\n  y: number;\r\n}\r\nexport type PointOrNull = Point | null;\r\n\r\nconst GirdContainer = ({ isGridVisible }: GridContainerProps): JSX.Element => {\r\n  const [startPoint, setStartPoint] = useState<PointOrNull>(null);\r\n  const [endPoint, setEndPoint] = useState<PointOrNull>(null);\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const containeRef = useRef<HTMLDivElement>(null);\r\n\r\n  const renderGrid = (): Array<JSX.Element> => {\r\n    const gridElements: Array<JSX.Element> = [];\r\n\r\n    for (let index = 0; index < 2160; index++) {\r\n      const dynamicClasses = isGridVisible ? `border border-gray-100` : \"\";\r\n\r\n      gridElements.push(\r\n        <div key={index} className={`${dynamicClasses} h-full w-full`}></div>\r\n      );\r\n    }\r\n\r\n    return gridElements;\r\n  };\r\n\r\n  const handleStartDrawing = (e: React.MouseEvent): void => {\r\n    e.preventDefault();\r\n\r\n    const container = containeRef.current;\r\n\r\n    if (container) {\r\n      setEndPoint({ x: e.clientX, y: e.clientY });\r\n      setStartPoint({ x: e.clientX, y: e.clientY });\r\n      setIsDrawing(true);\r\n\r\n      container.addEventListener(\"mousemove\", handleDrawing);\r\n      document.addEventListener(\"mouseup\", handleStopDrawing);\r\n    }\r\n  };\r\n\r\n  const handleDrawing = (e: MouseEvent): void => {\r\n    if (containeRef.current) {\r\n      setEndPoint({ x: e.clientX, y: e.clientY });\r\n    }\r\n  };\r\n\r\n  const handleStopDrawing = (): void => {\r\n    containeRef.current?.removeEventListener(\"mousemove\", handleDrawing);\r\n    document.removeEventListener(\"mouseup\", handleStopDrawing);\r\n  };\r\n\r\n  const calcRectArea = () => {\r\n    const startX = startPoint?.x || 0;\r\n    const startY = startPoint?.y || 0;\r\n    const endX = endPoint?.x || 0;\r\n    const endY = endPoint?.y || 0;\r\n\r\n    const area = String(Math.abs((endX - startX) * (endY - startY)));\r\n    const formattedArea = area\r\n      .split(\"\")\r\n      .map((letter, index, arr) => {\r\n        if ((index + 1) % 3 === 0 && arr.length > 5) {\r\n          return letter + \" \";\r\n        }\r\n\r\n        return letter;\r\n      })\r\n      .join(\"\");\r\n\r\n    return formattedArea + \"px\";\r\n  };\r\n\r\n  const getStartY = () => {\r\n    if (startPoint?.y && endPoint?.y) {\r\n      if (endPoint.y < startPoint.y) {\r\n        return endPoint.y;\r\n      }\r\n      return startPoint.y;\r\n    }\r\n  };\r\n\r\n  const getStartX = () => {\r\n    if (startPoint?.x && endPoint?.x) {\r\n      if (endPoint.x < startPoint.x) {\r\n        return endPoint.x;\r\n      }\r\n      return startPoint.x;\r\n    }\r\n  };\r\n\r\n  const getWidth = () => {\r\n    if (endPoint?.x && startPoint?.x) {\r\n      if (endPoint.x - startPoint.x < 0) {\r\n        return startPoint.x - endPoint.x;\r\n      }\r\n      return endPoint.x - startPoint.x;\r\n    }\r\n  };\r\n\r\n  const getHeight = () => {\r\n    if (endPoint?.y && startPoint?.y) {\r\n      if (endPoint.y - startPoint.y < 0) {\r\n        return startPoint.y - endPoint.y;\r\n      }\r\n      return endPoint.y - startPoint.y;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`w-5/6 h-5/6 grid grid-cols-60 grid-rows-36`}\r\n      onMouseDown={handleStartDrawing}\r\n      ref={containeRef}\r\n    >\r\n      {renderGrid()}\r\n      {isDrawing && (\r\n        <div\r\n          className=\"bg-blue-800 opacity-50 absolute flex justify-center items-center text-white\"\r\n          style={{\r\n            top: getStartY(),\r\n            left: getStartX(),\r\n            width: getWidth(),\r\n            height: getHeight(),\r\n          }}\r\n        >\r\n          {calcRectArea()}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GirdContainer;\r\n","import React, { useState } from \"react\";\nimport Checkbox from \"./components/Checkbox\";\nimport GridContainer from \"./components/GirdContainer\";\n\nconst App = (): JSX.Element => {\n  const [isGridVisible, setIsGridVisible] = useState(false);\n\n  return (\n    <div className=\"flex justify-center flex-wrap h-screen\">\n      <div className=\"flex items-center justify-center flex-wrap text-center w-5/6 border-b-2 border-gray-400 py-4 mb-2\">\n        <h1 className=\"w-full text-2xl my-2\">Toggle grid visibility</h1>\n        <Checkbox\n          isChecked={isGridVisible}\n          onClick={() => setIsGridVisible(prev => !prev)}\n        />\n      </div>\n      <GridContainer isGridVisible={isGridVisible} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}